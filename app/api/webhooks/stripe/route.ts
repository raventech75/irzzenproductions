import Stripe from "stripe";
import { headers } from "next/headers";
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";
import { createClient } from "@supabase/supabase-js";

// ‚ö° Config Stripe + Supabase
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2023-10-16",
});

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// üé® Fonction pour g√©n√©rer un PDF professionnel
async function createProfessionalPDF(metadata: any, session: Stripe.Checkout.Session) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // Format A4
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  
  // Couleurs
  const primaryColor = rgb(1, 0.6, 0.4); // Orange pastel professionnel
  const accentColor = rgb(1, 0.7, 0.5); // Orange plus clair
  const grayText = rgb(0.3, 0.3, 0.3);
  const lightGray = rgb(0.98, 0.95, 0.92); // Beige tr√®s clair
  
  let yPos = 800;
  const leftMargin = 50;
  const rightMargin = 545;

  // üéØ Fonction pour formater une date
  const formatDate = (dateStr: string) => {
    if (!dateStr) return "Date √† confirmer";
    try {
      // Si format YYYY-MM-DD, convertir en DD/MM/YYYY
      if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
        const [year, month, day] = dateStr.split('-');
        return `${day}/${month}/${year}`;
      }
      return dateStr; // Sinon garder tel quel
    } catch {
      return dateStr;
    }
  };

  // üìç EN-T√äTE
  page.drawRectangle({
    x: 0,
    y: yPos,
    width: 595,
    height: 60,
    color: primaryColor,
  });
  
  page.drawText("CONTRAT DE PRESTATION PHOTOGRAPHIQUE ET VID√âOGRAPHIQUE", {
    x: leftMargin,
    y: yPos + 25,
    size: 20,
    font: fontBold,
    color: rgb(1, 1, 1),
  });
  
  page.drawText("√âv√©nement - Mariage", {
    x: leftMargin,
    y: yPos + 5,
    size: 12,
    font,
    color: rgb(1, 1, 1),
  });

  yPos -= 80;

  // üìç INFORMATIONS G√âN√âRALES
  page.drawRectangle({
    x: leftMargin - 10,
    y: yPos - 15,
    width: rightMargin - leftMargin + 20,
    height: 30,
    color: lightGray,
  });
  
  page.drawText("INFORMATIONS G√âN√âRALES", {
    x: leftMargin,
    y: yPos,
    size: 14,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 35;
  
  // Date du contrat uniquement
  const today = new Date().toLocaleDateString('fr-FR');
  page.drawText(`Date du contrat : ${today}`, {
    x: leftMargin,
    y: yPos,
    size: 10,
    font,
    color: grayText,
  });

  yPos -= 30;

  // üìç PRESTATAIRE
  page.drawRectangle({
    x: leftMargin - 10,
    y: yPos - 15,
    width: rightMargin - leftMargin + 20,
    height: 30,
    color: lightGray,
  });
  
  page.drawText("LE PRESTATAIRE", {
    x: leftMargin,
    y: yPos,
    size: 14,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 35;

  // Informations du prestataire
  const prestataireInfo = [
    "IRZZEN PRODUCTIONS",
    "Soci√©t√© de services audiovisuels",
    "Email : contact@irzzenproductions.fr",
    "Si√®ge social : [Adresse √† compl√©ter]",
    "SIRET : [√Ä compl√©ter]"
  ];

  prestataireInfo.forEach(info => {
    page.drawText(info, {
      x: leftMargin,
      y: yPos,
      size: 10,
      font: info === prestataireInfo[0] ? fontBold : font,
    });
    yPos -= 15;
  });

  yPos -= 15;

  // üìç INFORMATIONS CLIENT
  page.drawRectangle({
    x: leftMargin - 10,
    y: yPos - 15,
    width: rightMargin - leftMargin + 20,
    height: 30,
    color: lightGray,
  });
  
  page.drawText("LE CLIENT", {
    x: leftMargin,
    y: yPos,
    size: 14,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 35;

  // Informations du couple
  const brideFirst = metadata.bride_first_name || "";
  const brideLast = metadata.bride_last_name || "";
  const groomFirst = metadata.groom_first_name || "";
  const groomLast = metadata.groom_last_name || "";
  const coupleName = metadata.couple_name || `${brideFirst} ${brideLast} & ${groomFirst} ${groomLast}`;
  
  page.drawText(`Futurs √©poux : ${coupleName}`, {
    x: leftMargin,
    y: yPos,
    size: 12,
    font: fontBold,
  });

  yPos -= 20;
  
  page.drawText(`Email de contact : ${session.customer_email || metadata.email || "Non renseign√©"}`, {
    x: leftMargin,
    y: yPos,
    size: 10,
    font,
  });

  yPos -= 20;

  // üìç D√âTAILS DU MARIAGE
  page.drawRectangle({
    x: leftMargin - 10,
    y: yPos - 15,
    width: rightMargin - leftMargin + 20,
    height: 30,
    color: lightGray,
  });
  
  page.drawText("D√âTAILS DU MARIAGE", {
    x: leftMargin,
    y: yPos,
    size: 14,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 35;

  // Date du mariage (format√©e)
  const weddingDate = formatDate(metadata.wedding_date);
  page.drawText(`Date du mariage : ${weddingDate}`, {
    x: leftMargin,
    y: yPos,
    size: 12,
    font: fontBold,
  });

  yPos -= 25;

  // üéØ Toutes les informations du mariage d√©taill√©es
  const marriageDetails = [
    { label: "Nombre d'invit√©s", value: metadata.guests },
    { label: "Lieu des pr√©paratifs", value: metadata.prepLocation },
    { label: "Heure des pr√©paratifs", value: metadata.prepTime },
    { label: "Adresse mairie", value: metadata.mairieLocation },
    { label: "Heure mairie", value: metadata.mairieTime },
    { label: "Lieu c√©r√©monie", value: metadata.ceremonyLocation || metadata.ceremony_address },
    { label: "Heure c√©r√©monie", value: metadata.ceremonyTime || metadata.ceremony_time },
    { label: "Lieu r√©ception", value: metadata.receptionLocation || metadata.reception_address },
    { label: "Heure r√©ception", value: metadata.receptionTime || metadata.reception_time },
    { label: "Adresse postale", value: metadata.address },
    { label: "Code postal", value: metadata.postalCode },
    { label: "Ville", value: metadata.city },
    { label: "Pays", value: metadata.country },
  ].filter(item => item.value && item.value.trim() !== "");

  marriageDetails.forEach(detail => {
    page.drawText(`${detail.label} : ${detail.value}`, {
      x: leftMargin,
      y: yPos,
      size: 10,
      font,
    });
    yPos -= 15;
  });

  // D√©roulement de la journ√©e
  if (metadata.schedule && metadata.schedule.trim()) {
    yPos -= 5;
    page.drawText("D√©roulement de la journ√©e :", {
      x: leftMargin,
      y: yPos,
      size: 11,
      font: fontBold,
    });
    yPos -= 15;

    // Affichage du texte avec retour √† la ligne
    const scheduleText = metadata.schedule;
    const maxWidth = 450;
    const words = scheduleText.split(' ');
    let line = '';
    
    for (const word of words) {
      const testLine = line + (line ? ' ' : '') + word;
      if (testLine.length * 6 > maxWidth) {
        if (line) {
          page.drawText(line, {
            x: leftMargin,
            y: yPos,
            size: 10,
            font,
            color: grayText,
          });
          yPos -= 15;
          line = word;
        }
      } else {
        line = testLine;
      }
    }
    if (line) {
      page.drawText(line, {
        x: leftMargin,
        y: yPos,
        size: 10,
        font,
        color: grayText,
      });
      yPos -= 15;
    }
  }

  yPos -= 10;

  // üìç PRESTATION S√âLECTIONN√âE
  page.drawRectangle({
    x: leftMargin - 10,
    y: yPos - 15,
    width: rightMargin - leftMargin + 20,
    height: 30,
    color: lightGray,
  });
  
  page.drawText("PRESTATION S√âLECTIONN√âE", {
    x: leftMargin,
    y: yPos,
    size: 14,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 35;

  // Formule
  const formula = metadata.formula || "Formule non sp√©cifi√©e";
  page.drawText(`Formule : ${formula}`, {
    x: leftMargin,
    y: yPos,
    size: 12,
    font: fontBold,
  });

  yPos -= 20;

  // Description de la formule
  if (metadata.formula_description) {
    const description = metadata.formula_description;
    const maxWidth = 450;
    const words = description.split(' ');
    let line = '';
    
    for (const word of words) {
      const testLine = line + (line ? ' ' : '') + word;
      if (testLine.length * 6 > maxWidth) {
        if (line) {
          page.drawText(line, {
            x: leftMargin,
            y: yPos,
            size: 10,
            font,
            color: grayText,
          });
          yPos -= 15;
          line = word;
        }
      } else {
        line = testLine;
      }
    }
    if (line) {
      page.drawText(line, {
        x: leftMargin,
        y: yPos,
        size: 10,
        font,
        color: grayText,
      });
      yPos -= 15;
    }
  }

  yPos -= 10;

  // Options s√©lectionn√©es
  if (metadata.selected_options) {
    page.drawText("Options incluses :", {
      x: leftMargin,
      y: yPos,
      size: 11,
      font: fontBold,
    });
    yPos -= 20;

    const options = metadata.selected_options.split(', ').filter(Boolean);
    options.forEach(option => {
      page.drawText(`‚Ä¢ ${option}`, {
        x: leftMargin + 15,
        y: yPos,
        size: 10,
        font,
      });
      yPos -= 15;
    });
  }

  // Extras
  if (metadata.extras) {
    yPos -= 5;
    page.drawText("Extras :", {
      x: leftMargin,
      y: yPos,
      size: 11,
      font: fontBold,
    });
    yPos -= 20;

    const extras = metadata.extras.split('|').filter(Boolean);
    extras.forEach(extra => {
      const [label, price] = extra.split(':');
      page.drawText(`‚Ä¢ ${label} : ${price}‚Ç¨`, {
        x: leftMargin + 15,
        y: yPos,
        size: 10,
        font,
      });
      yPos -= 15;
    });
  }

  yPos -= 20;

  // üìç R√âCAPITULATIF FINANCIER
  page.drawRectangle({
    x: leftMargin - 10,
    y: yPos - 15,
    width: rightMargin - leftMargin + 20,
    height: 30,
    color: lightGray,
  });
  
  page.drawText("R√âCAPITULATIF FINANCIER", {
    x: leftMargin,
    y: yPos,
    size: 14,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 35;

  // Tableau financier
  const financialData = [
    { label: "Total de la prestation", value: `${metadata.total_eur || '0'}‚Ç¨` },
    { label: "Acompte sugg√©r√© (15%)", value: `${metadata.deposit_eur || '0'}‚Ç¨` },
    { label: "Reste √† payer le jour J", value: `${metadata.remaining_eur || '0'}‚Ç¨` },
  ];

  financialData.forEach((item, index) => {
    // Ligne altern√©e
    if (index % 2 === 0) {
      page.drawRectangle({
        x: leftMargin - 5,
        y: yPos - 5,
        width: rightMargin - leftMargin + 10,
        height: 20,
        color: rgb(0.98, 0.98, 0.98),
      });
    }

    page.drawText(item.label, {
      x: leftMargin,
      y: yPos,
      size: 11,
      font: index === 0 ? fontBold : font,
    });

    page.drawText(item.value, {
      x: rightMargin - 80,
      y: yPos,
      size: 11,
      font: fontBold,
      color: index === 0 ? primaryColor : rgb(0, 0, 0),
    });

    yPos -= 25;
  });

  yPos -= 15;

  // Notes sp√©ciales ou demandes particuli√®res
  const notesText = metadata.notes || metadata.specialRequests;
  if (notesText && notesText.trim()) {
    page.drawText("Demandes particuli√®res :", {
      x: leftMargin,
      y: yPos,
      size: 11,
      font: fontBold,
    });
    yPos -= 20;

    // Affichage des notes avec retour √† la ligne
    const maxWidth = 450;
    const words = notesText.split(' ');
    let line = '';
    
    for (const word of words) {
      const testLine = line + (line ? ' ' : '') + word;
      if (testLine.length * 6 > maxWidth) {
        if (line) {
          page.drawText(line, {
            x: leftMargin,
            y: yPos,
            size: 10,
            font,
            color: grayText,
          });
          yPos -= 15;
          line = word;
        }
      } else {
        line = testLine;
      }
    }
    if (line) {
      page.drawText(line, {
        x: leftMargin,
        y: yPos,
        size: 10,
        font,
        color: grayText,
      });
      yPos -= 15;
    }
  }

  yPos -= 30;

  // üìç CONDITIONS G√âN√âRALES
  page.drawText("CONDITIONS G√âN√âRALES", {
    x: leftMargin,
    y: yPos,
    size: 12,
    font: fontBold,
    color: primaryColor,
  });

  yPos -= 25;

  const conditions = [
    "ARTICLE 1 - OBJET DU CONTRAT",
    "Le pr√©sent contrat a pour objet la r√©alisation d'une prestation photographique et/ou",
    "vid√©ographique lors de l'√©v√©nement sp√©cifi√© ci-dessus.",
    "",
    "ARTICLE 2 - OBLIGATIONS DU PRESTATAIRE",
    "‚Ä¢ R√©aliser la prestation selon les modalit√©s convenues",
    "‚Ä¢ Livrer les photos/vid√©os retouch√©es dans un d√©lai de 4 √† 6 semaines",
    "‚Ä¢ Respecter la confidentialit√© de l'√©v√©nement",
    "‚Ä¢ Fournir un mat√©riel professionnel en parfait √©tat de fonctionnement",
    "",
    "ARTICLE 3 - OBLIGATIONS DU CLIENT",
    "‚Ä¢ R√©gler les sommes dues selon les modalit√©s pr√©vues",
    "‚Ä¢ Informer le prestataire de tout changement d'horaire ou de lieu",
    "‚Ä¢ Faciliter l'acc√®s aux lieux de la prestation",
    "‚Ä¢ Assurer la s√©curit√© du mat√©riel durant la prestation",
    "",
    "ARTICLE 4 - TARIFS ET MODALIT√âS DE PAIEMENT",
    "‚Ä¢ L'acompte confirme la r√©servation et n'est pas obligatoire",
    "‚Ä¢ Le solde est payable le jour de la prestation (esp√®ces, ch√®que ou virement)",
    "‚Ä¢ Aucun escompte ne sera accord√© en cas de paiement anticip√©",
    "",
    "ARTICLE 5 - ANNULATION",
    "‚Ä¢ Annulation par le client : possible jusqu'√† 30 jours avant (acompte non rembours√©)",
    "‚Ä¢ Annulation √† moins de 30 jours : int√©gralit√© due",
    "‚Ä¢ Force majeure : report sans frais suppl√©mentaires",
    "",
    "ARTICLE 6 - PROPRI√âT√â INTELLECTUELLE",
    "‚Ä¢ Le prestataire conserve tous les droits d'auteur sur ses cr√©ations",
    "‚Ä¢ Le client dispose d'un droit d'usage priv√© et familial des ≈ìuvres",
    "‚Ä¢ Toute utilisation commerciale n√©cessite l'accord √©crit du prestataire",
    "",
    "ARTICLE 7 - LIVRAISON",
    "‚Ä¢ Livraison sous 4 √† 6 semaines via galerie en ligne s√©curis√©e",
    "‚Ä¢ Les fichiers source ne sont pas fournis (sauf mention contraire)",
    "‚Ä¢ Sauvegarde garantie pendant 2 ans apr√®s livraison",
    "",
    "ARTICLE 8 - RESPONSABILIT√â",
    "‚Ä¢ Le prestataire ne peut √™tre tenu responsable d'√©v√©nements ind√©pendants",
    "de sa volont√© (panne mat√©riel, conditions m√©t√©o, etc.)",
    "‚Ä¢ Assurance responsabilit√© civile professionnelle souscrite",
    "",
    "ARTICLE 9 - DROIT √Ä L'IMAGE",
    "‚Ä¢ Le prestataire peut utiliser les images √† des fins promotionnelles",
    "‚Ä¢ Opposition possible sur simple demande √©crite",
    "",
    "ARTICLE 10 - LITIGES",
    "‚Ä¢ Tout litige rel√®ve de la comp√©tence des tribunaux fran√ßais",
    "‚Ä¢ Droit applicable : droit fran√ßais",
  ];

  let currentPage = page;
  let currentYPos = yPos;

  conditions.forEach((condition, index) => {
    // V√©rifier si on a besoin d'une nouvelle page
    if (currentYPos < 100) {
      currentPage = pdfDoc.addPage([595, 842]);
      currentYPos = 800;
    }

    const isTitle = condition.startsWith("ARTICLE");
    const isEmpty = condition === "";
    
    if (isEmpty) {
      currentYPos -= 8;
      return;
    }

    currentPage.drawText(condition, {
      x: leftMargin,
      y: currentYPos,
      size: isTitle ? 10 : 9,
      font: isTitle ? fontBold : font,
      color: isTitle ? primaryColor : grayText,
    });
    currentYPos -= isTitle ? 18 : 12;
  });

  currentYPos -= 30;

  // Pied de page sur toutes les pages uniquement
  const pageCount = pdfDoc.getPageCount();
  for (let i = 0; i < pageCount; i++) {
    const currentPageForFooter = pdfDoc.getPage(i);
    currentPageForFooter.drawText("IRZZEN PRODUCTIONS - Contact : contact@irzzenproductions.fr - www.irzzenproductions.fr", {
      x: leftMargin,
      y: 30,
      size: 8,
      font,
      color: grayText,
    });
    
    currentPageForFooter.drawText(`Page ${i + 1}/${pageCount}`, {
      x: rightMargin - 50,
      y: 30,
      size: 8,
      font,
      color: grayText,
    });
  }

  return await pdfDoc.save();
}

export async function POST(req: Request) {
  const sig = headers().get("stripe-signature");
  if (!sig) return new Response("Missing signature", { status: 400 });

  const rawBody = await req.text();
  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(
      rawBody,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET!
    );
  } catch (err: any) {
    console.error("[stripe webhook] Signature invalide:", err.message);
    return new Response("Invalid signature", { status: 400 });
  }

  console.log("[stripe webhook] Event re√ßu:", event.type);

  try {
    if (event.type === "checkout.session.completed") {
      const session = event.data.object as Stripe.Checkout.Session;
      console.log("‚úÖ Checkout session completed:", session.id);

      const metadata = session.metadata || {};
      console.log("üîç TOUTES LES M√âTADONN√âES RE√áUES:", JSON.stringify(metadata, null, 2));
      
      // üéØ Debug sp√©cifique pour les informations du mariage
      console.log("üë∞ Mari√©e:", metadata.bride_first_name, metadata.bride_last_name);
      console.log("ü§µ Mari√©:", metadata.groom_first_name, metadata.groom_last_name);
      console.log("üìÖ Date mariage:", metadata.wedding_date);
      console.log("üìç Lieux:", {
        prep: metadata.prepLocation,
        ceremonie: metadata.ceremonyLocation,
        reception: metadata.receptionLocation
      });

      // üéØ Mapping flexible des donn√©es selon les diff√©rentes sources
      const bride_first_name = metadata.bride_first_name || "";
      const bride_last_name = metadata.bride_last_name || "";
      const groom_first_name = metadata.groom_first_name || "";
      const groom_last_name = metadata.groom_last_name || "";
      const couple_name = metadata.couple_name || `${bride_first_name} ${bride_last_name} & ${groom_first_name} ${groom_last_name}`;
      const wedding_date = metadata.wedding_date || "";
      
      // üéØ TOUTES les informations du questionnaire d√©taill√©
      const phone = metadata.phone || "";
      const address = metadata.address || "";
      const postalCode = metadata.postalCode || "";
      const city = metadata.city || "";
      const country = metadata.country || "";
      const guests = metadata.guests || "";
      const prepLocation = metadata.prepLocation || "";
      const prepTime = metadata.prepTime || "";
      const mairieLocation = metadata.mairieLocation || "";
      const mairieTime = metadata.mairieTime || "";
      const ceremonyLocation = metadata.ceremonyLocation || metadata.ceremony_address || "";
      const ceremonyTime = metadata.ceremonyTime || metadata.ceremony_time || "";
      const receptionLocation = metadata.receptionLocation || metadata.reception_address || "";
      const receptionTime = metadata.receptionTime || metadata.reception_time || "";
      const schedule = metadata.schedule || "";
      const specialRequests = metadata.specialRequests || "";
      
      // Prestation
      const formula = metadata.formula || "";
      const formula_description = metadata.formula_description || "";
      const total_eur = metadata.total_eur || "";
      const deposit_eur = metadata.deposit_eur || "";
      const remaining_eur = metadata.remaining_eur || "";
      const selected_options = metadata.selected_options || "";
      const extras = metadata.extras || "";
      const email = session.customer_email || metadata.email || "";

      // Objet structur√© pour le PDF
      const contractData = {
        bride_first_name,
        bride_last_name,
        groom_first_name,
        groom_last_name,
        couple_name,
        wedding_date,
        phone,
        address,
        postalCode,
        city,
        country,
        guests,
        prepLocation,
        prepTime,
        mairieLocation,
        mairieTime,
        ceremonyLocation,
        ceremonyTime,
        receptionLocation,
        receptionTime,
        schedule,
        specialRequests,
        formula,
        formula_description,
        total_eur,
        deposit_eur,
        remaining_eur,
        selected_options,
        extras,
        email,
      };

      console.log("üìã Donn√©es structur√©es pour le PDF:", contractData);

      // üé® G√©n√©rer le PDF professionnel avec toutes les donn√©es
      const pdfBytes = await createProfessionalPDF(contractData, session);
      console.log("üìÑ PDF professionnel g√©n√©r√©, taille:", pdfBytes.length, "bytes");

      // V√©rifier le bucket
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      if (bucketsError) {
        console.error("‚ùå Erreur listBuckets:", bucketsError);
        return new Response("Bucket check failed", { status: 500 });
      }
      
      const contractsBucket = buckets?.find(b => b.name === 'contrats');
      if (!contractsBucket) {
        console.error("‚ùå Bucket 'contrats' introuvable. Buckets disponibles:", 
          buckets?.map(b => b.name));
        return new Response("Bucket not found", { status: 500 });
      }

      console.log("‚úÖ Bucket 'contrats' trouv√©");

      // Upload du PDF
      const fileName = `${session.id}.pdf`;
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from("contrats")
        .upload(fileName, pdfBytes, {
          contentType: "application/pdf",
          upsert: true,
        });

      if (uploadError) {
        console.error("‚ùå Erreur upload Supabase:", uploadError);
        return new Response(`Upload failed: ${uploadError.message}`, { status: 500 });
      }

      console.log("‚úÖ Upload r√©ussi:", uploadData?.path);

      // URL publique
      const { data: publicUrlData } = supabase.storage
        .from("contrats")
        .getPublicUrl(fileName);

      console.log("üìÇ PDF professionnel accessible ici:", publicUrlData.publicUrl);

      return new Response(
        JSON.stringify({
          received: true,
          pdfUrl: publicUrlData.publicUrl,
        }),
        { status: 200, headers: { "Content-Type": "application/json" } }
      );
    }

    return new Response(JSON.stringify({ received: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (err: any) {
    console.error("[stripe webhook] Handler error:", err);
    return new Response(`Server error: ${err.message}`, { status: 500 });
  }
}